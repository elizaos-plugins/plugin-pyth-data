{"version":3,"sources":["../src/error/base.ts","../src/error/data.ts","../src/environment.ts","../src/utils/priceFeedsValidation.ts","../src/actions/actionGetPriceFeeds.ts","../src/utils/priceUpdateStreamValidation.ts","../src/actions/actionGetPriceUpdatesStream.ts","../src/utils/priceUpdatesValidation.ts","../src/actions/actionGetLatestPriceUpdates.ts","../src/utils/publisherCapsValidation.ts","../src/actions/actionGetLatestPublisherCaps.ts","../src/index.ts"],"names":["PythError","code","message","severity","details","originalError","DataError","_DataError","subscription","reason","currentCount","maxLimit","data","validationErrors","expected","received","targetFormat","error","schema","symbol","lastUpdateTime","maxAge","chain","operation","ENV","PYTH_NETWORKS","pythEnvSchema","z","getConfig","env","validatePythConfig","runtime","envConfig","config","errorMessage","getNetworkConfig","priceFeedAttributesSchema","priceFeedsSchema","validatePriceFeedsData","content","result","elizaLogger","GRANULAR_LOG","logGranular","getPriceFeedsAction","_a","_b","state","_options","callback","messageContent","query","filter","networkConfig","client","HermesClient","options","priceFeeds","transformedFeeds","feed","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","callbackContent","errorStack","errorContent","actionGetPriceFeeds_default","streamOptionsSchema","priceMetadataSchema","priceDataSchema","parsedPriceUpdateSchema","binaryDataSchema","priceUpdateStreamSchema","validatePriceUpdateStreamData","PYTH_MAX_PRICE_STREAMS","activeStreams","extractPriceIds","text","priceIds","symbolMatch","symbolToId","id","hexMatchesWithPrefix","hexMatches","processPriceUpdateData","item","formatPriceUpdateText","streamId","messageCount","collectStreamData","eventSource","resolve","reject","collectedData","event","rawData","createPriceStream","processedData","updateText","getPriceUpdatesStreamAction","_runtime","index","encoding","parsed","allowUnordered","benchmarksOnly","actionGetPriceUpdatesStream_default","ajv","Ajv","priceUpdatesSchema","validatePriceUpdatesData","validate","errors","err","normalizePriceFeedId","formatPriceFeedId","getLatestPriceUpdatesAction","match","cleanId","_state","hermesClient","updates","formattedText","update","metadata","proofTime","actionGetLatestPriceUpdates_default","publisherCapsSchema","validatePublisherCapsData","getLatestPublisherCapsAction","response","publisherCaps","currentTimestamp","cap","actionGetLatestPublisherCaps_default","spinner","ora","chalk","actions","actionTable","Table","action","statusTable","pythDataPlugin","index_default"],"mappings":"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","file":"index.js","sourcesContent":["// Base error codes\nexport enum PythErrorCode {\n  // WebSocket connection errors\n  WS_CONNECTION_TIMEOUT = 'WS_CONNECTION_TIMEOUT',\n  WS_CONNECTION_REFUSED = 'WS_CONNECTION_REFUSED',\n  WS_INVALID_URL = 'WS_INVALID_URL',\n  WS_HEARTBEAT_FAILED = 'WS_HEARTBEAT_FAILED',\n  WS_SSL_ERROR = 'WS_SSL_ERROR',\n  WS_INVALID_STATE_TRANSITION = 'WS_INVALID_STATE_TRANSITION',\n  WS_MESSAGE_PARSE_ERROR = 'WS_MESSAGE_PARSE_ERROR',\n  WS_RATE_LIMIT_EXCEEDED = 'WS_RATE_LIMIT_EXCEEDED',\n  WS_INVALID_MESSAGE_FORMAT = 'WS_INVALID_MESSAGE_FORMAT',\n\n  // Runtime errors\n  RUNTIME_INITIALIZATION = 'RUNTIME_INITIALIZATION',\n  RUNTIME_CONFIGURATION = 'RUNTIME_CONFIGURATION',\n  RUNTIME_VALIDATION = 'RUNTIME_VALIDATION',\n\n  // State management errors\n  STATE_INVALID_TRANSITION = 'STATE_INVALID_TRANSITION',\n  STATE_PERSISTENCE = 'STATE_PERSISTENCE',\n  STATE_UNEXPECTED_DISCONNECT = 'STATE_UNEXPECTED_DISCONNECT',\n  STATE_RECONNECTION_FAILED = 'STATE_RECONNECTION_FAILED',\n  STATE_MAX_RECONNECT_EXCEEDED = 'STATE_MAX_RECONNECT_EXCEEDED',\n\n  // Data handling errors\n  DATA_INVALID_SUBSCRIPTION = 'DATA_INVALID_SUBSCRIPTION',\n  DATA_SUBSCRIPTION_LIMIT = 'DATA_SUBSCRIPTION_LIMIT',\n  DATA_VALIDATION_FAILED = 'DATA_VALIDATION_FAILED',\n  DATA_SEQUENCE_ERROR = 'DATA_SEQUENCE_ERROR',\n  DATA_TRANSFORM_ERROR = 'DATA_TRANSFORM_ERROR',\n  DATA_SCHEMA_ERROR = 'DATA_SCHEMA_ERROR',\n  DATA_STALE_PRICE = 'DATA_STALE_PRICE',\n  DATA_CHAIN_ERROR = 'DATA_CHAIN_ERROR',\n  DATA_PARSE_ERROR = 'DATA_PARSE_ERROR',\n  DATA_PRICE_UNAVAILABLE = 'DATA_PRICE_UNAVAILABLE',\n  DATA_CONFIDENCE_TOO_LOW = 'DATA_CONFIDENCE_TOO_LOW',\n  DATA_CONTRACT_ERROR = 'DATA_CONTRACT_ERROR',\n\n  // Generic errors\n  UNKNOWN = 'UNKNOWN',\n  INTERNAL = 'INTERNAL',\n  NETWORK = 'NETWORK',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  TIMEOUT = 'TIMEOUT',\n  INVALID_PARAMETER = 'INVALID_PARAMETER',\n  SUBSCRIPTION_LIMIT_EXCEEDED = 'SUBSCRIPTION_LIMIT_EXCEEDED',\n  WEBSOCKET_ERROR = 'WEBSOCKET_ERROR',\n  MESSAGE_PROCESSING_ERROR = 'MESSAGE_PROCESSING_ERROR',\n  CONNECTION_FAILED = 'CONNECTION_FAILED',\n  HANDLER_FAILED = 'HANDLER_FAILED',\n\n  // Generic Errors\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR'\n}\n\nexport enum ErrorSeverity {\n  LOW = 'LOW',         // Non-critical errors that don't affect core functionality\n  MEDIUM = 'MEDIUM',   // Errors that affect some functionality but system can continue\n  HIGH = 'HIGH',       // Critical errors that require immediate attention\n  FATAL = 'FATAL'      // System cannot continue operation\n}\n\n// Error detail types\nexport interface ErrorDetails {\n  [key: string]: unknown;\n}\n\n// Extended error interface\nexport interface IPythError {\n  code: PythErrorCode;\n  message: string;\n  severity: ErrorSeverity;\n  timestamp: number;\n  details?: ErrorDetails;\n  originalError?: Error;\n  name: string;\n}\n\n// Base Pyth error class\nexport class PythError extends Error implements IPythError {\n  public readonly timestamp: number;\n  public readonly name: string = 'PythError';\n\n  constructor(\n    public readonly code: PythErrorCode,\n    public readonly message: string,\n    public readonly severity: ErrorSeverity = ErrorSeverity.MEDIUM,\n    public readonly details?: ErrorDetails,\n    public readonly originalError?: Error\n  ) {\n    super(message);\n    this.timestamp = Date.now();\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      severity: this.severity,\n      timestamp: this.timestamp,\n      details: this.details,\n      stack: this.stack,\n      originalError: this.originalError ? {\n        name: this.originalError.name,\n        message: this.originalError.message,\n        stack: this.originalError.stack\n      } : undefined\n    };\n  }\n}\n\n// Error utility functions\nexport const createError = (\n  code: PythErrorCode,\n  message: string,\n  severity?: ErrorSeverity,\n  details?: ErrorDetails,\n  originalError?: Error\n): PythError => {\n  return new PythError(code, message, severity, details, originalError);\n}; ","import { PythError, ErrorSeverity, type PythErrorCode, type ErrorDetails } from './base';\n\n// Data Error Codes\nexport enum DataErrorCode {\n  // Validation Errors\n  VALIDATION_FAILED = 'DATA_VALIDATION_FAILED',\n  INVALID_SUBSCRIPTION = 'DATA_INVALID_SUBSCRIPTION',\n  SUBSCRIPTION_LIMIT = 'DATA_SUBSCRIPTION_LIMIT',\n  SCHEMA_ERROR = 'DATA_SCHEMA_ERROR',\n\n  // Processing Errors\n  SEQUENCE_ERROR = 'DATA_SEQUENCE_ERROR',\n  TRANSFORM_ERROR = 'DATA_TRANSFORM_ERROR',\n  PARSE_ERROR = 'DATA_PARSE_ERROR',\n\n  // Price Feed Errors\n  PRICE_UNAVAILABLE = 'DATA_PRICE_UNAVAILABLE',\n  CONFIDENCE_TOO_LOW = 'DATA_CONFIDENCE_TOO_LOW',\n  STALE_PRICE = 'DATA_STALE_PRICE',\n\n  // Chain-Specific Errors\n  CHAIN_DATA_ERROR = 'DATA_CHAIN_ERROR',\n  CONTRACT_ERROR = 'DATA_CONTRACT_ERROR',\n\n  // Network and Connection Errors\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  WEBSOCKET_ERROR = 'WEBSOCKET_ERROR',\n  MESSAGE_PROCESSING_ERROR = 'MESSAGE_PROCESSING_ERROR',\n  CONNECTION_FAILED = 'CONNECTION_FAILED',\n  HANDLER_FAILED = 'HANDLER_FAILED',\n  SUBSCRIPTION_LIMIT_EXCEEDED = 'SUBSCRIPTION_LIMIT_EXCEEDED',\n  PRICE_FEEDS_FETCH_FAILED = 'PRICE_FEEDS_FETCH_FAILED'\n}\n\n// Validation error type\ntype ValidationError = string | {\n  field: string;\n  message: string;\n  value?: unknown;\n};\n\nexport class DataError extends PythError {\n  public readonly name: string = 'DataError';\n\n  constructor(\n    code: PythErrorCode | DataErrorCode,\n    message: string,\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM,\n    details?: ErrorDetails,\n    originalError?: Error\n  ) {\n    super(code as PythErrorCode, message, severity, details, originalError);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n\n  // Factory methods\n  static invalidSubscription(subscription: unknown, reason: string): DataError {\n    return new DataError(\n      DataErrorCode.INVALID_SUBSCRIPTION,\n      'Invalid subscription parameters',\n      ErrorSeverity.MEDIUM,\n      { subscription, reason }\n    );\n  }\n\n  static subscriptionLimitExceeded(\n    currentCount: number,\n    maxLimit: number\n  ): DataError {\n    return new DataError(\n      DataErrorCode.SUBSCRIPTION_LIMIT,\n      `Subscription limit exceeded (${currentCount}/${maxLimit})`,\n      ErrorSeverity.HIGH,\n      { currentCount, maxLimit }\n    );\n  }\n\n  static validationFailed(\n    data: unknown,\n    validationErrors: ValidationError[]\n  ): DataError {\n    return new DataError(\n      DataErrorCode.VALIDATION_FAILED,\n      'Data validation failed',\n      ErrorSeverity.MEDIUM,\n      { data, validationErrors }\n    );\n  }\n\n  static sequenceError(\n    expected: number,\n    received: number,\n    details?: ErrorDetails\n  ): DataError {\n    return new DataError(\n      DataErrorCode.SEQUENCE_ERROR,\n      `Message sequence error: expected ${expected}, received ${received}`,\n      ErrorSeverity.MEDIUM,\n      { expected, received, ...details }\n    );\n  }\n\n  static transformError(data: unknown, targetFormat: string, error?: Error): DataError {\n    return new DataError(\n      DataErrorCode.TRANSFORM_ERROR,\n      'Failed to transform data',\n      ErrorSeverity.MEDIUM,\n      { data, targetFormat },\n      error\n    );\n  }\n\n  static schemaError(data: unknown, schema: Record<string, unknown>, error?: Error): DataError {\n    return new DataError(\n      DataErrorCode.SCHEMA_ERROR,\n      'Data does not match schema',\n      ErrorSeverity.HIGH,\n      { data, schema },\n      error\n    );\n  }\n\n  static stalePriceError(\n    symbol: string,\n    lastUpdateTime: number,\n    maxAge: number\n  ): DataError {\n    return new DataError(\n      DataErrorCode.STALE_PRICE,\n      `Price data for ${symbol} is stale`,\n      ErrorSeverity.HIGH,\n      {\n        symbol,\n        lastUpdateTime,\n        maxAge,\n        currentTime: Date.now()\n      }\n    );\n  }\n\n  static chainError(\n    chain: string,\n    operation: string,\n    error?: Error\n  ): DataError {\n    return new DataError(\n      DataErrorCode.CHAIN_DATA_ERROR,\n      `Chain-specific error on ${chain} during ${operation}`,\n      ErrorSeverity.HIGH,\n      { chain, operation },\n      error\n    );\n  }\n}\n\n// Type guard\nexport const isDataError = (error: unknown): error is DataError => {\n  return error instanceof DataError;\n};","import type { IAgentRuntime} from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Environment Variables\nlet ENV = \"mainnet\";\n\n// Pyth Network Configuration\nconst PYTH_NETWORKS = {\n    mainnet: {\n        hermes: process.env.PYTH_MAINNET_HERMES_URL || \"https://hermes.pyth.network\",\n        wss: process.env.PYTH_MAINNET_WSS_URL || \"wss://hermes.pyth.network/ws\",\n        pythnet: process.env.PYTH_MAINNET_PYTHNET_URL || \"https://pythnet.rpcpool.com\",\n        contractRegistry: process.env.PYTH_MAINNET_CONTRACT_REGISTRY || \"https://pyth.network/developers/price-feed-ids\",\n        programKey: process.env.PYTH_MAINNET_PROGRAM_KEY || \"FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH\"\n    },\n    testnet: {\n        hermes: process.env.PYTH_TESTNET_HERMES_URL || \"https://hermes.pyth.network\",\n        wss: process.env.PYTH_TESTNET_WSS_URL || \"wss://hermes.pyth.network/ws\",\n        pythnet: process.env.PYTH_TESTNET_PYTHNET_URL || \"https://pythnet.rpcpool.com\",\n        contractRegistry: process.env.PYTH_TESTNET_CONTRACT_REGISTRY || \"https://pyth.network/developers/price-feed-ids#testnet\",\n        programKey: process.env.PYTH_TESTNET_PROGRAM_KEY || \"FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH\"\n    }\n} as const;\n\n// // Log environment information\n// elizaLogger.info(\"Environment sources\", {\n//     shellVars: Object.keys(process.env).filter(key => key.startsWith('PYTH_')),\n// });\n\nexport const pythEnvSchema = z.object({\n    PYTH_NETWORK_ENV: z.enum([\"mainnet\", \"testnet\"]).default(\"mainnet\"),\n    PYTH_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\n    PYTH_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\n    PYTH_TIMEOUT: z.string().transform(Number).default(\"5000\"),\n    PYTH_GRANULAR_LOG: z.boolean().default(true),\n    PYTH_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\n    RUNTIME_CHECK_MODE: z.boolean().default(false),\n    PYTH_ENABLE_PRICE_STREAMING: z.boolean().default(true),\n    PYTH_MAX_PRICE_STREAMS: z.string().transform(Number).default(\"10\"),\n    PYTH_TEST_ID01: z.string().default(\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"),\n    PYTH_TEST_ID02: z.string().default(\"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\"),\n\n});\n\nexport type PythConfig = z.infer<typeof pythEnvSchema>;\n\nexport function getConfig(\n    env: string | undefined | null = ENV ||\n        process.env.PYTH_NETWORK_ENV\n): PythConfig {\n    ENV = env || \"mainnet\";\n\n    return {\n        PYTH_NETWORK_ENV: (env as \"mainnet\" | \"testnet\") || \"mainnet\",\n        PYTH_MAX_RETRIES: Number(process.env.PYTH_MAX_RETRIES || \"3\"),\n        PYTH_RETRY_DELAY: Number(process.env.PYTH_RETRY_DELAY || \"1000\"),\n        PYTH_TIMEOUT: Number(process.env.PYTH_TIMEOUT || \"5000\"),\n        PYTH_GRANULAR_LOG: process.env.PYTH_GRANULAR_LOG === \"true\" || false,\n        PYTH_LOG_LEVEL: (process.env.PYTH_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\n        RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n        PYTH_ENABLE_PRICE_STREAMING: process.env.PYTH_ENABLE_PRICE_STREAMING === \"true\" || true,\n        PYTH_MAX_PRICE_STREAMS: Number(process.env.PYTH_MAX_PRICE_STREAMS || \"10\"),\n        PYTH_TEST_ID01: process.env.PYTH_TEST_ID01 || \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n        PYTH_TEST_ID02: process.env.PYTH_TEST_ID02 || \"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\",\n    };\n}\n\nexport async function validatePythConfig(\n    runtime: IAgentRuntime\n): Promise<PythConfig> {\n    try {\n        const envConfig = getConfig(\n            runtime.getSetting(\"PYTH_NETWORK_ENV\") ?? undefined\n        );\n\n        const config = {\n            PYTH_NETWORK_ENV: process.env.PYTH_NETWORK_ENV || runtime.getSetting(\"PYTH_NETWORK_ENV\") || envConfig.PYTH_NETWORK_ENV,\n            PYTH_MAX_RETRIES: process.env.PYTH_MAX_RETRIES || runtime.getSetting(\"PYTH_MAX_RETRIES\") || envConfig.PYTH_MAX_RETRIES.toString(),\n            PYTH_RETRY_DELAY: process.env.PYTH_RETRY_DELAY || runtime.getSetting(\"PYTH_RETRY_DELAY\") || envConfig.PYTH_RETRY_DELAY.toString(),\n            PYTH_GRANULAR_LOG: process.env.PYTH_GRANULAR_LOG === \"true\" || false,\n            PYTH_LOG_LEVEL: process.env.PYTH_LOG_LEVEL || runtime.getSetting(\"PYTH_LOG_LEVEL\") || envConfig.PYTH_LOG_LEVEL,\n            RUNTIME_CHECK_MODE: process.env.RUNTIME_CHECK_MODE === \"true\" || false,\n            PYTH_ENABLE_PRICE_STREAMING: process.env.PYTH_ENABLE_PRICE_STREAMING === \"true\" || true,\n            PYTH_MAX_PRICE_STREAMS: process.env.PYTH_MAX_PRICE_STREAMS || runtime.getSetting(\"PYTH_MAX_PRICE_STREAMS\") || envConfig.PYTH_MAX_PRICE_STREAMS.toString(),\n            PYTH_TEST_ID01: process.env.PYTH_TEST_ID01 || envConfig.PYTH_TEST_ID01,\n            PYTH_TEST_ID02: process.env.PYTH_TEST_ID02 || envConfig.PYTH_TEST_ID02,\n        };\n\n        return pythEnvSchema.parse(config);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        throw new Error(`Failed to validate Pyth configuration: ${errorMessage}`);\n    }\n}\n\n// Export network configurations\nexport const getNetworkConfig = (env: string = ENV) => PYTH_NETWORKS[env as keyof typeof PYTH_NETWORKS];\n","import { z } from 'zod';\nimport { DataError, ErrorSeverity, DataErrorCode } from '../error';\nimport { elizaLogger } from '@elizaos/core';\n\n// Schema for price feed attributes\nconst priceFeedAttributesSchema = z.object({\n    asset_type: z.string(),\n    base: z.string(),\n    description: z.string(),\n    display_symbol: z.string(),\n    quote_currency: z.string(),\n    schedule: z.string(),\n    symbol: z.string(),\n    generic_symbol: z.string().optional(),\n    cms_symbol: z.string().optional(),\n    country: z.string().optional(),\n    cqs_symbol: z.string().optional(),\n    nasdaq_symbol: z.string().optional(),\n    contract_id: z.string().optional()\n});\n\n// Schema for price feeds request\nexport const priceFeedsSchema = z.object({\n    text: z.string(),\n    query: z.string().optional(),\n    filter: z.string().optional(),\n    success: z.boolean().optional(),\n    data: z.object({\n        feeds: z.array(z.object({\n            id: z.string(),\n            attributes: priceFeedAttributesSchema\n        })),\n        count: z.number(),\n        responseType: z.string(),\n        isArray: z.boolean(),\n        error: z.string().optional()\n    }).optional()\n});\n\nexport async function validatePriceFeedsData(content: unknown): Promise<boolean> {\n    try {\n        const result = await priceFeedsSchema.parseAsync(content);\n        elizaLogger.debug('Price feeds validation passed', { result });\n        return true;\n    } catch (error) {\n        elizaLogger.error('Price feeds validation failed', { error });\n        throw new DataError(\n            DataErrorCode.VALIDATION_FAILED,\n            'Price feeds validation failed',\n            ErrorSeverity.HIGH,\n            { error }\n        );\n    }\n}","import { type Action, elizaLogger } from \"@elizaos/core\";\nimport type { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// import { HermesClient } from \"../hermes/HermesClient\";\nimport { HermesClient } from \"@pythnetwork/hermes-client\";\nimport { DataError, ErrorSeverity, DataErrorCode } from \"../error\";\nimport { validatePythConfig, getNetworkConfig, getConfig } from \"../environment\";\nimport { validatePriceFeedsData } from \"../utils/priceFeedsValidation\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.PYTH_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[PriceFeeds] ${message}`, data);\n        console.log(`[PriceFeeds] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface PriceFeedAttributes {\n    asset_type: string;\n    base: string;\n    description: string;\n    display_symbol: string;\n    quote_currency: string;\n    schedule: string;\n    symbol: string;\n    generic_symbol?: string;\n    cms_symbol?: string;\n    country?: string;\n    cqs_symbol?: string;\n    nasdaq_symbol?: string;\n    contract_id?: string;\n}\n\ninterface GetPriceFeedsContent extends Content {\n    text: string;\n    query?: string;\n    filter?: string;\n    success?: boolean;\n    data?: {\n        feeds: Array<{\n            id: string;\n            attributes: PriceFeedAttributes;\n        }>;\n        count: number;\n        responseType: string;\n        isArray: boolean;\n        error?: string;\n    };\n}\n\nexport const getPriceFeedsAction: Action = {\n    name: \"GET_PRICE_FEEDS\",\n    similes: [\"FETCH_PRICE_FEEDS\", \"LIST_PRICE_FEEDS\", \"QUERY_PRICE_FEEDS\"],\n    description: \"Retrieve price feeds from Pyth Network matching specific criteria\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Get all available price feeds from Pyth Network\",\n                query: \"BTC\",\n                filter: \"USD\"\n            } as GetPriceFeedsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Price feeds matching query BTC and filter USD\",\n                success: true,\n                query: \"BTC\",\n                filter: \"USD\",\n                data: {\n                    feeds: [{\n                        id: \"f9c0172ba10dfa4d19088d94f5bf61d3b54d5bd7483a322a982e1373ee8ea31b\",\n                        attributes: {\n                            asset_type: \"Crypto\",\n                            base: \"BTC\",\n                            description: \"BITCOIN / US DOLLAR\",\n                            display_symbol: \"BTC/USD\",\n                            generic_symbol: \"BTCUSD\",\n                            quote_currency: \"USD\",\n                            schedule: \"America/New_York;O,O,O,O,O,O,O;\",\n                            symbol: \"Crypto.BTC/USD\"\n                        }\n                    }]\n                }\n            } as GetPriceFeedsContent\n        } as ActionExample\n    ]],\n\n    async validate(runtime: IAgentRuntime, message: Memory): Promise<boolean> {\n        // Check if this message is intended for this action\n        if (message.content?.type !== \"GET_PRICE_FEEDS\") {\n            return true; // Skip validation for other actions\n        }\n\n        logGranular(\"Starting validation\", {\n            messageId: message.id,\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetPriceFeedsContent;\n            logGranular(\"Validating content structure\", { content });\n\n            // Validate against schema\n            try {\n                await validatePriceFeedsData(content);\n                logGranular(\"Schema validation passed\");\n            } catch (error) {\n                logGranular(\"Schema validation error\", { error });\n                if (error instanceof DataError) {\n                    elizaLogger.error(\"Schema validation failed\", {\n                        errors: error.details?.errors\n                    });\n                    throw error;\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Schema validation failed\",\n                    ErrorSeverity.HIGH,\n                    { error }\n                );\n            }\n\n            // Validate Pyth configuration\n            const config = await validatePythConfig(runtime);\n            logGranular(\"Pyth config validation\", { config });\n\n            if (!config) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Invalid Pyth configuration\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            // Content validation is optional for this action\n            if (content.query && typeof content.query !== 'string') {\n                logGranular(\"Invalid query type\", { query: content.query });\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Query must be a string\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            if (content.filter && typeof content.filter !== 'string') {\n                logGranular(\"Invalid filter type\", { filter: content.filter });\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Filter must be a string\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            logGranular(\"Validation successful\", {\n                query: content.query,\n                filter: content.filter\n            });\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", {\n                error: error instanceof Error ? {\n                    message: error.message,\n                    stack: error.stack,\n                    name: error.name\n                } : String(error)\n            });\n\n            if (error instanceof DataError) {\n                throw error;\n            }\n            throw new DataError(\n                DataErrorCode.VALIDATION_FAILED,\n                \"Invalid content format\",\n                ErrorSeverity.HIGH,\n                { content: message.content }\n            );\n        }\n    },\n\n    async handler(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> {\n        logGranular(\"Starting handler execution\", {\n            messageId: message.id,\n            hasCallback: !!callback\n        });\n\n        try {\n            const messageContent = message.content as GetPriceFeedsContent;\n            const { query, filter } = messageContent;\n\n            logGranular(\"Processing request\", { query, filter });\n\n            // Get Pyth configuration\n            const config = await validatePythConfig(runtime);\n            logGranular(\"Got Pyth config\", { networkEnv: config.PYTH_NETWORK_ENV });\n\n            // Initialize HermesClient with configuration\n            const networkConfig = getNetworkConfig(config.PYTH_NETWORK_ENV);\n            logGranular(\"Network config\", { networkConfig });\n\n            const client = new HermesClient(networkConfig.hermes);\n            logGranular(\"Initialized HermesClient\", {\n                endpoint: networkConfig.hermes\n            });\n\n            // Get price feeds with proper options\n            const options = {\n                query: query,\n                filter: filter\n            };\n\n            logGranular(\"Fetching price feeds with options\", {\n                options,\n                hermesEndpoint: networkConfig.hermes,\n                clientType: typeof client.getPriceFeeds\n            });\n\n            const priceFeeds = await client.getPriceFeeds(options);\n\n            logGranular(\"Retrieved price feeds\", {\n                responseType: typeof priceFeeds,\n                isArray: Array.isArray(priceFeeds),\n                count: priceFeeds?.length || 0,\n                sample: priceFeeds?.slice(0, 3) || [] // Log first 3 feeds for debugging\n            });\n\n            // Process and transform feeds\n            const transformedFeeds = priceFeeds.map((feed) => ({\n                id: feed.id,\n                attributes: {\n                    asset_type: feed.attributes?.asset_type || \"Unknown\",\n                    base: feed.attributes?.base || \"Unknown\",\n                    description: feed.attributes?.description || \"Unknown\",\n                    display_symbol: feed.attributes?.display_symbol || \"Unknown\",\n                    quote_currency: feed.attributes?.quote_currency || \"Unknown\",\n                    schedule: feed.attributes?.schedule || \"\",\n                    symbol: feed.attributes?.symbol || \"Unknown\",\n                    generic_symbol: feed.attributes?.generic_symbol,\n                    cms_symbol: feed.attributes?.cms_symbol,\n                    country: feed.attributes?.country,\n                    cqs_symbol: feed.attributes?.cqs_symbol,\n                    nasdaq_symbol: feed.attributes?.nasdaq_symbol,\n                    contract_id: feed.attributes?.contract_id\n                }\n            }));\n\n            // Prepare callback content\n            const callbackContent: GetPriceFeedsContent = {\n                text: `Retrieved ${priceFeeds.length} price feeds:\n${transformedFeeds.map(feed =>\n    `- ${feed.attributes.description} (${feed.attributes.display_symbol})\n  Type: ${feed.attributes.asset_type}\n  Base: ${feed.attributes.base}\n  Quote: ${feed.attributes.quote_currency}\n  Schedule: ${feed.attributes.schedule}\n  ID: ${feed.id}`\n).join('\\n')}\n${query ? `\\nMatching query: \"${query}\"` : ''}${filter ? `\\nWith filter: \"${filter}\"` : ''}`,\n                query,\n                filter,\n                success: true,\n                data: {\n                    feeds: transformedFeeds,\n                    count: priceFeeds.length,\n                    responseType: \"object\",\n                    isArray: true\n                }\n            };\n\n            logGranular(\"Prepared callback content\", {\n                feedCount: transformedFeeds.length,\n                firstFeed: transformedFeeds[0]\n            });\n\n            // Execute callback if provided\n            if (callback) {\n                logGranular(\"Executing callback\");\n                await callback(callbackContent);\n                logGranular(\"Callback completed\");\n            }\n\n            return true;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n            const errorStack = error instanceof Error ? error.stack : undefined;\n\n            logGranular(\"Error retrieving price feeds\", {\n                error: errorMessage,\n                stack: errorStack\n            });\n\n            // Prepare error callback content\n            const errorContent: GetPriceFeedsContent = {\n                text: `Failed to retrieve price feeds: ${errorMessage}\\nError details: ${errorStack || 'No stack trace available'}`,\n                success: false,\n                data: {\n                    feeds: [],\n                    error: errorMessage,\n                    count: 0,\n                    responseType: \"object\",\n                    isArray: true\n                }\n            };\n\n            // Execute callback if provided\n            if (callback) {\n                await callback(errorContent);\n            }\n\n            // Throw appropriate error\n            throw new DataError(\n                DataErrorCode.PRICE_FEEDS_FETCH_FAILED,\n                errorMessage,\n                ErrorSeverity.HIGH\n            );\n        }\n    }\n};\n\nexport default getPriceFeedsAction;\n","import { z } from 'zod';\nimport { DataError, ErrorSeverity, DataErrorCode } from '../error';\nimport { elizaLogger } from '@elizaos/core';\n\n// Schema for price update stream options\nconst streamOptionsSchema = z.object({\n    encoding: z.enum(['hex', 'base64']).optional(),\n    parsed: z.boolean().optional(),\n    allowUnordered: z.boolean().optional(),\n    benchmarksOnly: z.boolean().optional()\n});\n\n// Schema for price metadata\nconst priceMetadataSchema = z.object({\n    slot: z.number(),\n    proof_available_time: z.number(),\n    prev_publish_time: z.number()\n});\n\n// Schema for price data\nconst priceDataSchema = z.object({\n    price: z.string(),\n    conf: z.string(),\n    expo: z.number(),\n    publish_time: z.number()\n});\n\n// Schema for parsed price update\nconst parsedPriceUpdateSchema = z.object({\n    id: z.string(),\n    price: priceDataSchema,\n    ema_price: priceDataSchema,\n    metadata: priceMetadataSchema.optional()\n});\n\n// Schema for binary data\nconst binaryDataSchema = z.object({\n    encoding: z.string(),\n    data: z.array(z.string())\n});\n\n// Schema for price updates stream request\nexport const priceUpdateStreamSchema = z.object({\n    text: z.string(),\n    priceIds: z.array(z.string().regex(/^0x[0-9a-fA-F]{64}$/)),\n    options: streamOptionsSchema.optional(),\n    success: z.boolean().optional(),\n    data: z.object({\n        streamId: z.string(),\n        status: z.enum(['connected', 'disconnected', 'error']),\n        binary: binaryDataSchema.optional(),\n        parsed: z.array(parsedPriceUpdateSchema).optional(),\n        error: z.string().optional()\n    }).optional()\n});\n\nexport async function validatePriceUpdateStreamData(content: unknown): Promise<boolean> {\n    try {\n        const result = await priceUpdateStreamSchema.parseAsync(content);\n        elizaLogger.debug('Price update stream validation passed', { result });\n        return true;\n    } catch (error) {\n        elizaLogger.error('Price update stream validation failed', { error });\n        throw new DataError(\n            DataErrorCode.VALIDATION_FAILED,\n            'Price update stream validation failed',\n            ErrorSeverity.HIGH,\n            { error }\n        );\n    }\n}","import { type Action, elizaLogger } from \"@elizaos/core\";\nimport type { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\nimport { HermesClient } from \"@pythnetwork/hermes-client\";\nimport { DataError, ErrorSeverity, DataErrorCode } from \"../error\";\nimport { validatePythConfig, getNetworkConfig, getConfig } from \"../environment\";\nimport { validatePriceUpdateStreamData } from \"../utils/priceUpdateStreamValidation\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.PYTH_GRANULAR_LOG;\nconst PYTH_MAX_PRICE_STREAMS = Number(config.PYTH_MAX_PRICE_STREAMS);\n\n// Track active streams\nconst activeStreams = new Map<string, EventSource>();\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[PriceUpdatesStream] ${message}`, data);\n        console.log(`[PriceUpdatesStream] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\n// Add type for price update item\ninterface PriceUpdateItem {\n    id: string;\n    price: {\n        price: string;\n        conf: string;\n        expo: number;\n        publish_time: number;\n    };\n    ema_price: {\n        price: string;\n        conf: string;\n        expo: number;\n        publish_time: number;\n    };\n    metadata?: {\n        slot: number;\n        proof_available_time: number;\n        prev_publish_time: number;\n    };\n}\ninterface GetPriceUpdatesStreamContent extends Content {\n    text: string;\n    priceIds: string[];\n    options?: {\n        encoding?: \"hex\" | \"base64\";\n        parsed?: boolean;\n        allowUnordered?: boolean;\n        benchmarksOnly?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        streamId: string;\n        status: 'connected' | 'disconnected' | 'error';\n        binary?: {\n            encoding: string;\n            data: string[];\n        };\n        parsed?: Array<{\n            id: string;\n            price: {\n                price: string;\n                conf: string;\n                expo: number;\n                publish_time: number;\n            };\n            ema_price: {\n                price: string;\n                conf: string;\n                expo: number;\n                publish_time: number;\n            };\n            metadata?: {\n                slot: number;\n                proof_available_time: number;\n                prev_publish_time: number;\n            };\n        }>;\n        error?: string;\n    };\n}\n\n// Helper function to extract price IDs from text\nfunction extractPriceIds(text: string): string[] {\n    let priceIds: string[] = [];\n\n    // Try to match common price symbols first\n    const symbolMatch = text.match(/(?:BTC|ETH|SOL)\\/USD/g);\n    if (symbolMatch) {\n        const symbolToId: { [key: string]: string } = {\n            'BTC/USD': '0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43',\n            'ETH/USD': '0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace',\n            'SOL/USD': '0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d'\n        };\n        priceIds = symbolMatch.map(symbol => symbolToId[symbol]).filter(id => id);\n    }\n\n    if (priceIds.length === 0) {\n        const hexMatchesWithPrefix = text.match(/0x[0-9a-fA-F]{64}/g);\n        if (hexMatchesWithPrefix) {\n            priceIds = hexMatchesWithPrefix;\n        } else {\n            const hexMatches = text.match(/[0-9a-fA-F]{64}/g);\n            if (hexMatches) {\n                priceIds = hexMatches.map(id => `0x${id}`);\n            }\n        }\n    }\n\n    return priceIds;\n}\n\n// Define proper types for the processed data\ninterface ProcessedPriceData {\n    binary?: {\n        encoding: string;\n        data: string[];\n    };\n    parsed?: Array<{\n        id: string;\n        price: {\n            price: string;\n            conf: string;\n            expo: number;\n            publish_time: number;\n        };\n        ema_price: {\n            price: string;\n            conf: string;\n            expo: number;\n            publish_time: number;\n        };\n        metadata?: {\n            slot: number;\n            proof_available_time: number;\n            prev_publish_time: number;\n        };\n    }>;\n}\n\ninterface RawPriceData {\n    binary: {\n        encoding: string;\n        data: string[];\n    };\n    parsed: Array<PriceUpdateItem>;\n}\n\n// Helper function to process price update data\nfunction processPriceUpdateData(data: RawPriceData): ProcessedPriceData {\n    return {\n        binary: data.binary,\n        parsed: data.parsed.map((item: PriceUpdateItem) => ({\n            id: item.id,\n            price: {\n                price: item.price.price,\n                conf: item.price.conf,\n                expo: item.price.expo,\n                publish_time: item.price.publish_time\n            },\n            ema_price: {\n                price: item.ema_price.price,\n                conf: item.ema_price.conf,\n                expo: item.ema_price.expo,\n                publish_time: item.ema_price.publish_time\n            },\n            metadata: item.metadata ? {\n                slot: item.metadata.slot,\n                proof_available_time: item.metadata.proof_available_time,\n                prev_publish_time: item.metadata.prev_publish_time\n            } : undefined\n        }))\n    };\n}\n\n// Helper function to format price update text\nfunction formatPriceUpdateText(streamId: string, messageCount: number, data: RawPriceData): string {\n    return `Price Update Stream (ID: stream_${streamId}, Update ${messageCount}/${PYTH_MAX_PRICE_STREAMS}):\n${data.parsed.map((item: PriceUpdateItem) =>\n    `Price Feed: ${item.id}\nCurrent Price: ${(Number(item.price.price) * Math.pow(10, item.price.expo)).toFixed(2)} USD\nConfidence: ±${(Number(item.price.conf) * Math.pow(10, item.price.expo)).toFixed(2)} USD\nEMA Price: ${(Number(item.ema_price.price) * Math.pow(10, item.ema_price.expo)).toFixed(2)} USD\nEMA Confidence: ±${(Number(item.ema_price.conf) * Math.pow(10, item.ema_price.expo)).toFixed(2)} USD\nLast Update: ${new Date(item.price.publish_time * 1000).toLocaleString()}${item.metadata ? `\nSlot: ${item.metadata.slot}\nProof Available: ${new Date(item.metadata.proof_available_time * 1000).toLocaleString()}` : ''}`\n).join('\\n\\n')}`;\n}\n\n// Function to collect stream data\nasync function collectStreamData(eventSource: EventSource, streamId: string): Promise<RawPriceData> {\n    return new Promise((resolve, reject) => {\n        let messageCount = 0;\n        const collectedData: RawPriceData = {\n            binary: { encoding: 'hex', data: [] },\n            parsed: []\n        };\n\n        eventSource.onmessage = (event) => {\n            messageCount++;\n            logGranular(\"Received price update\", { streamId, messageCount, data: event.data });\n\n            try {\n                const rawData = JSON.parse(event.data) as RawPriceData;\n                collectedData.binary.data.push(...rawData.binary.data);\n                collectedData.parsed.push(...rawData.parsed);\n\n                if (messageCount >= PYTH_MAX_PRICE_STREAMS) {\n                    eventSource.close();\n                    resolve(collectedData);\n                }\n            } catch (error) {\n                eventSource.close();\n                reject(error);\n            }\n        };\n\n        eventSource.onerror = (error) => {\n            eventSource.close();\n            reject(error);\n        };\n    });\n}\n\n// Helper function to create and manage price stream\nasync function createPriceStream(\n    runtime: IAgentRuntime,\n    priceIds: string[],\n    callback?: HandlerCallback\n): Promise<void> {\n    const config = await validatePythConfig(runtime);\n    if (!config) {\n        throw new DataError(\n            DataErrorCode.VALIDATION_FAILED,\n            \"Invalid Pyth configuration\",\n            ErrorSeverity.HIGH\n        );\n    }\n\n    const networkConfig = getNetworkConfig(config.PYTH_NETWORK_ENV);\n    const client = new HermesClient(networkConfig.hermes);\n    const streamId = `stream_${Date.now()}`;\n\n    logGranular(\"Creating price stream for IDs:\", { streamId, priceIds });\n\n    try {\n        const eventSource = (await client.getPriceUpdatesStream(priceIds, {\n            parsed: true,\n            encoding: 'hex'\n        })) as unknown as EventSource;\n\n        // Store the stream\n        activeStreams.set(streamId, eventSource as any);\n\n        try {\n            // Collect all stream data\n            const collectedData = await collectStreamData(eventSource as any, streamId);\n\n            // Process collected data\n            const processedData = processPriceUpdateData(collectedData);\n            const updateText = formatPriceUpdateText(streamId, PYTH_MAX_PRICE_STREAMS, collectedData);\n\n            // Send single callback with all data\n            if (callback) {\n                callback({\n                    text: updateText,\n                    success: true,\n                    priceIds,\n                    data: {\n                        streamId,\n                        status: 'connected',\n                        ...processedData\n                    }\n                } as GetPriceUpdatesStreamContent);\n            }\n\n            activeStreams.delete(streamId);\n            logGranular(\"Stream completed successfully\", { streamId });\n\n        } catch (error) {\n            logGranular(\"Error collecting stream data\", { streamId, error });\n            if (callback) {\n                callback({\n                    text: `Error processing price updates: ${error instanceof Error ? error.message : String(error)}`,\n                    success: false,\n                    priceIds,\n                    data: {\n                        streamId,\n                        status: 'error',\n                        error: error instanceof Error ? error.message : String(error)\n                    }\n                } as GetPriceUpdatesStreamContent);\n            }\n            activeStreams.delete(streamId);\n            throw error;\n        }\n    } catch (error) {\n        logGranular(\"Error creating price stream\", { streamId, error });\n        throw new DataError(\n            DataErrorCode.TRANSFORM_ERROR,\n            error instanceof Error ? error.message : String(error),\n            ErrorSeverity.HIGH\n        );\n    }\n}\n\n\n\nexport const getPriceUpdatesStreamAction: Action = {\n    name: \"GET_PRICE_UPDATES_STREAM\",\n    similes: [\"STREAM_PRICE_UPDATES\", \"SUBSCRIBE_TO_PRICES\", \"WATCH_PRICE_FEED\"],\n    description: \"Create a streaming connection for real-time price updates from Pyth Network\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Stream BTC/USD price updates\",\n                priceIds: [\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"],\n                options: {\n                    encoding: \"hex\",\n                    parsed: true,\n                    benchmarksOnly: true\n                }\n            } as GetPriceUpdatesStreamContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Starting BTC/USD price stream...\",\n                success: true,\n                priceIds: [\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"],\n                data: {\n                    streamId: \"stream_1\",\n                    status: \"connected\",\n                    updates: [{\n                        id: \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                        price: 42000,\n                        confidence: 100,\n                        timestamp: 1641034800,\n                        emaPrice: 41950\n                    }]\n                }\n            } as GetPriceUpdatesStreamContent\n        } as ActionExample\n    ], [\n        {\n            user: \"user\",\n            content: {\n                text: \"Stream ETH and BTC prices with benchmarks only\",\n                priceIds: [\n                    \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                    \"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\"\n                ],\n                options: {\n                    benchmarksOnly: true,\n                    parsed: true\n                }\n            } as GetPriceUpdatesStreamContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Starting price stream for BTC and ETH...\",\n                success: true,\n                priceIds: [\n                    \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                    \"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\"\n                ],\n                data: {\n                    streamId: \"stream_2\",\n                    status: \"connected\",\n                    updates: [\n                        {\n                            id: \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                            price: 42000,\n                            confidence: 100,\n                            timestamp: 1641034800,\n                            emaPrice: 41950\n                        },\n                        {\n                            id: \"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\",\n                            price: 2500,\n                            confidence: 50,\n                            timestamp: 1641034800,\n                            emaPrice: 2495\n                        }\n                    ]\n                }\n            } as GetPriceUpdatesStreamContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        // Check if this message is intended for this action\n        if (message.content?.type !== \"GET_PRICE_UPDATES_STREAM\") {\n            return true; // Skip validation for other actions\n        }\n\n        logGranular(\"Starting validation\", {\n            content: message.content\n        });\n\n        try {\n            let content = message.content as GetPriceUpdatesStreamContent;\n\n            // Handle text-only input by extracting priceIds\n            if (!content.priceIds) {\n                const priceIds = extractPriceIds(content.text);\n                if (priceIds.length > 0) {\n                    content = {\n                        ...content,\n                        priceIds,\n                        options: {\n                            parsed: true,\n                            encoding: \"hex\"\n                        }\n                    };\n                    message.content = content;\n                }\n            }\n\n            // Validate against schema\n            try {\n                await validatePriceUpdateStreamData(content);\n                logGranular(\"Schema validation passed\");\n            } catch (error) {\n                logGranular(\"Schema validation failed\", { error });\n                if (error instanceof DataError) {\n                    elizaLogger.error(\"Schema validation failed\", {\n                        errors: error.details?.errors\n                    });\n                    throw error;\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Schema validation failed\",\n                    ErrorSeverity.HIGH,\n                    { error }\n                );\n            }\n\n            // Validate Pyth configuration\n            const config = await validatePythConfig(_runtime);\n            if (!config) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Invalid Pyth configuration\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            if (!content.priceIds || !Array.isArray(content.priceIds)) {\n                throw DataError.validationFailed(content, [\"priceIds must be an array of strings\"]);\n            }\n\n            if (content.priceIds.length === 0) {\n                throw DataError.validationFailed(content, [\"priceIds array cannot be empty\"]);\n            }\n\n            // Validate each price ID is a valid hex string\n            content.priceIds.forEach((id, index) => {\n                if (!/^0x[0-9a-fA-F]{64}$/.test(id)) {\n                    throw DataError.validationFailed(content, [`Invalid price ID at index ${index}: ${id}`]);\n                }\n            });\n\n            // Validate options if provided\n            if (content.options) {\n                const { encoding, parsed, allowUnordered, benchmarksOnly } = content.options;\n\n                if (encoding && ![\"hex\", \"base64\"].includes(encoding)) {\n                    throw DataError.validationFailed(content, [\"encoding must be either 'hex' or 'base64'\"]);\n                }\n\n                if (parsed !== undefined && typeof parsed !== \"boolean\") {\n                    throw DataError.validationFailed(content, [\"parsed must be a boolean\"]);\n                }\n\n                if (allowUnordered !== undefined && typeof allowUnordered !== \"boolean\") {\n                    throw DataError.validationFailed(content, [\"allowUnordered must be a boolean\"]);\n                }\n\n                if (benchmarksOnly !== undefined && typeof benchmarksOnly !== \"boolean\") {\n                    throw DataError.validationFailed(content, [\"benchmarksOnly must be a boolean\"]);\n                }\n            }\n\n            logGranular(\"GET_PRICE_UPDATES_STREAM validation successful\", {\n                priceIds: content.priceIds,\n                options: content.options\n            });\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            throw error;\n        }\n    },\n\n    async handler(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> {\n        logGranular(\"Starting handler execution\", {\n            messageId: message.id,\n            messageContent: message.content\n        });\n\n        try {\n            const messageContent = message.content as GetPriceUpdatesStreamContent;\n            let priceIds = messageContent.priceIds;\n\n            // If no priceIds in content, try to extract them\n            if (!priceIds) {\n                priceIds = extractPriceIds(messageContent.text);\n                if (priceIds.length === 0) {\n                    throw new DataError(\n                        DataErrorCode.VALIDATION_FAILED,\n                        \"Could not extract any valid price IDs from message\",\n                        ErrorSeverity.HIGH\n                    );\n                }\n            }\n\n            await createPriceStream(runtime, priceIds, callback);\n            return true;\n\n        } catch (error) {\n            logGranular(\"Error in price updates stream handler\", error);\n            throw new DataError(\n                DataErrorCode.TRANSFORM_ERROR,\n                error instanceof Error ? error.message : String(error),\n                ErrorSeverity.HIGH\n            );\n        }\n    }\n};\n\nexport default getPriceUpdatesStreamAction;\n\n","import { elizaLogger } from \"@elizaos/core\";\nimport { DataError, PythErrorCode, ErrorSeverity } from \"../error\";\nimport Ajv, { type ErrorObject } from \"ajv\";\n\nconst ajv = new Ajv({\n    allErrors: true,\n    verbose: true,\n    coerceTypes: true,\n    useDefaults: true\n});\n\n// Price updates schema\nexport const priceUpdatesSchema = {\n    type: 'object',\n    required: ['priceIds'],\n    properties: {\n        text: { type: 'string' },\n        priceIds: {\n            type: 'array',\n            items: {\n                type: 'string',\n                pattern: '^(0x)?[0-9a-fA-F]+$'\n            },\n            minItems: 1,\n            description: 'Array of price feed IDs to fetch updates for'\n        },\n        options: {\n            type: 'object',\n            properties: {\n                encoding: {\n                    type: 'string',\n                    enum: ['hex', 'base64'],\n                    description: 'Encoding format for the price updates'\n                },\n                parsed: {\n                    type: 'boolean',\n                    description: 'Whether to return parsed price updates'\n                }\n            }\n        }\n    }\n};\n\n/**\n * Validates price updates data against the schema\n * @param data Data to validate\n * @returns Promise<boolean> True if validation succeeds\n * @throws DataError if validation fails\n */\nexport async function validatePriceUpdatesData(data: unknown): Promise<boolean> {\n    try {\n        const validate = ajv.compile(priceUpdatesSchema);\n        const valid = validate(data);\n\n        if (!valid) {\n            const errors = validate.errors || [];\n            elizaLogger.error(\"Price updates validation failed\", {\n                errors,\n                data\n            });\n\n            throw new DataError(\n                PythErrorCode.DATA_VALIDATION_FAILED,\n                \"Price updates validation failed\",\n                ErrorSeverity.HIGH,\n                {\n                    errors: errors.map((err: ErrorObject) => ({\n                        path: err.schemaPath,\n                        message: err.message,\n                        params: err.params\n                    })),\n                    data\n                }\n            );\n        }\n\n        return true;\n    } catch (error) {\n        if (error instanceof DataError) {\n            throw error;\n        }\n\n        elizaLogger.error(\"Price updates validation error\", {\n            error: error instanceof Error ? error.message : String(error),\n            data\n        });\n\n        throw new DataError(\n            PythErrorCode.DATA_SCHEMA_ERROR,\n            \"Price updates validation error\",\n            ErrorSeverity.HIGH,\n            {\n                error: error instanceof Error ? error.message : String(error),\n                data\n            }\n        );\n    }\n}\n\n/**\n * Validates a price ID format\n * @param priceId Price ID to validate\n * @returns boolean True if price ID is valid\n */\nexport function validatePriceId(priceId: string): boolean {\n    return /^(0x)?[0-9a-fA-F]+$/.test(priceId);\n}","import { type Action, elizaLogger } from \"@elizaos/core\";\nimport type { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// import { HermesClient } from \"../hermes/HermesClient\";\nimport { HermesClient } from \"@pythnetwork/hermes-client\";\nimport { DataError, ErrorSeverity, DataErrorCode } from \"../error\";\nimport { validatePythConfig, getNetworkConfig, getConfig } from \"../environment\";\nimport { validatePriceUpdatesData } from \"../utils/priceUpdatesValidation\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.PYTH_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[PriceUpdates] ${message}`, data);\n        console.log(`[PriceUpdates] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\n// Helper function to normalize price feed IDs\nconst normalizePriceFeedId = (id: string): string => {\n    // Ensure 0x prefix and lowercase\n    return id.toLowerCase().startsWith('0x') ? id.toLowerCase() : `0x${id.toLowerCase()}`;\n};\n\n// Helper function to format price feed ID for display\nconst formatPriceFeedId = (id: string): string => {\n    // Add '0x' prefix if not present\n    return id.toLowerCase().startsWith('0x') ? id.toLowerCase() : `0x${id.toLowerCase()}`;\n};\n\ninterface GetLatestPriceUpdatesContent extends Content {\n    text: string;\n    priceIds: string[];\n    options?: {\n        encoding?: \"hex\" | \"base64\";\n        parsed?: boolean;\n    };\n    success?: boolean;\n    data?: {\n        updates?: Array<{\n            price_feed_id: string;\n            price: number;\n            conf: number;\n            expo: number;\n            publish_time: number;\n            ema_price?: {\n                price: number;\n                conf: number;\n                expo: number;\n            };\n        }>;\n        error?: string;\n    };\n}\n\nexport const getLatestPriceUpdatesAction: Action = {\n    name: \"GET_LATEST_PRICE_UPDATES\",\n    similes: [\"FETCH_LATEST_PRICES\", \"GET_CURRENT_PRICES\", \"CHECK_PRICE_FEED\"],\n    description: \"Retrieve latest price updates from Pyth Network\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Get latest price updates for 0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                priceIds: [\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"],\n                options: {\n                    encoding: \"base64\",\n                    parsed: true\n                }\n            } as GetLatestPriceUpdatesContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Here is the latest BTC/USD price\",\n                success: true,\n                priceIds: [\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\"],\n                data: {\n                    updates: [{\n                        price_feed_id: \"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n                        price: 42000000000,\n                        conf: 100000000,\n                        expo: -8,\n                        publish_time: 1641034800,\n                        ema_price: {\n                            price: 41950000000,\n                            conf: 95000000,\n                            expo: -8\n                        }\n                    }]\n                }\n            } as GetLatestPriceUpdatesContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        // Check if this message is intended for this action\n        if (message.content?.type !== \"GET_LATEST_PRICE_UPDATES\") {\n            return true; // Skip validation for other actions\n        }\n\n        logGranular(\"Validating GET_LATEST_PRICE_UPDATES action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetLatestPriceUpdatesContent;\n\n            // Extract priceIds from text if not provided directly\n            if (!content.priceIds && content.text) {\n                const match = content.text.match(/([a-fA-F0-9]{64})/);\n                if (match) {\n                    content.priceIds = [formatPriceFeedId(match[1])];\n                }\n            }\n\n            // Normalize all price feed IDs\n            if (content.priceIds) {\n                content.priceIds = content.priceIds.map(normalizePriceFeedId);\n            }\n\n            // Use the new validation function\n            try {\n                await validatePriceUpdatesData(content);\n                logGranular(\"Schema validation passed\");\n            } catch (error) {\n                logGranular(\"Schema validation failed\", { error });\n                if (error instanceof DataError) {\n                    elizaLogger.error(\"Schema validation failed\", {\n                        errors: error.details?.errors\n                    });\n                    throw error;\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Schema validation failed\",\n                    ErrorSeverity.HIGH,\n                    { error }\n                );\n            }\n\n            // Keep existing validation as additional checks\n            if (!content.priceIds || !Array.isArray(content.priceIds)) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"priceIds must be an array of strings\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            if (content.priceIds.length === 0) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"priceIds array cannot be empty\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            // Validate each price ID is a valid hex string\n            content.priceIds.forEach((id, index) => {\n                const cleanId = id.startsWith('0x') ? id.slice(2) : id;\n                if (!/^[0-9a-fA-F]{64}$/.test(cleanId)) {\n                    throw new DataError(\n                        DataErrorCode.VALIDATION_FAILED,\n                        `Invalid price ID at index ${index}: ${id}. Must be a 64-character hex string`,\n                        ErrorSeverity.HIGH\n                    );\n                }\n            });\n\n            // Validate options if provided\n            if (content.options) {\n                if (content.options.encoding && ![\"hex\", \"base64\"].includes(content.options.encoding)) {\n                    throw new DataError(\n                        DataErrorCode.VALIDATION_FAILED,\n                        \"Invalid encoding option. Must be 'hex' or 'base64'\",\n                        ErrorSeverity.HIGH\n                    );\n                }\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_LATEST_PRICE_UPDATES\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_LATEST_PRICE_UPDATES action\");\n\n        try {\n            const messageContent = message.content as GetLatestPriceUpdatesContent;\n\n            // Log the full message content\n            logGranular(\"Message content received\", messageContent);\n\n            // Extract priceIds from text if not provided directly\n            if (!messageContent.priceIds && messageContent.text) {\n                const match = messageContent.text.match(/([a-fA-F0-9]{64})/);\n                if (match) {\n                    messageContent.priceIds = [formatPriceFeedId(match[1])];\n                }\n            }\n\n            // Normalize all price feed IDs\n            if (messageContent.priceIds) {\n                messageContent.priceIds = messageContent.priceIds.map(normalizePriceFeedId);\n            }\n\n            const { priceIds, options = {} } = messageContent;\n\n            // Log extracted values\n            logGranular(\"Extracted values\", {\n                priceIds,\n                options\n            });\n\n            // Get Pyth configuration\n            const config = await validatePythConfig(runtime);\n            if (!config) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Invalid Pyth configuration\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            // Get network configuration\n            const networkConfig = getNetworkConfig(config.PYTH_NETWORK_ENV);\n            const hermesClient = new HermesClient(networkConfig.hermes);\n\n            logGranular(\"Initialized HermesClient\", {\n                endpoint: networkConfig.hermes\n            });\n\n            try {\n                // Log the request details\n                logGranular(\"Requesting price updates with params\", {\n                    priceIds,\n                    options\n                });\n\n                // Get latest price updates\n                const updates = await hermesClient.getLatestPriceUpdates(priceIds, {\n                    parsed: true,\n                    encoding: options?.encoding as \"hex\" | \"base64\" | undefined\n                });\n\n                // Log the raw response\n                logGranular(\"Raw response from Hermes\", {\n                    updates\n                });\n\n                if (!updates || !updates.parsed) {\n                    throw new Error(\"No updates received from Hermes\");\n                }\n\n                logGranular(\"Successfully retrieved price updates\", {\n                    updates,\n                    parsedCount: updates.parsed?.length\n                });\n\n                if (callback) {\n                    const formattedText = updates.parsed?.map(update => {\n                        const metadata = update.metadata;\n                        const proofTime = metadata?.proof_available_time;\n                        return `Price Feed: ${normalizePriceFeedId(update.id)}\nCurrent Price: ${(Number(update.price.price) * Math.pow(10, update.price.expo)).toFixed(2)} USD\nConfidence: ±${(Number(update.price.conf) * Math.pow(10, update.price.expo)).toFixed(2)} USD\nEMA Price: ${(Number(update.ema_price.price) * Math.pow(10, update.ema_price.expo)).toFixed(2)} USD\nEMA Confidence: ±${(Number(update.ema_price.conf) * Math.pow(10, update.ema_price.expo)).toFixed(2)} USD\nLast Update: ${new Date(update.price.publish_time * 1000).toLocaleString()}${metadata ? `\nSlot: ${metadata.slot}\nProof Available: ${proofTime ? new Date(proofTime * 1000).toLocaleString() : 'Not available'}` : ''}`;\n                    }).join('\\n\\n');\n\n                    callback({\n                        text: formattedText,\n                        success: true,\n                        priceIds,\n                        data: {\n                            updates: updates.parsed?.map(update => ({\n                                price_feed_id: normalizePriceFeedId(update.id),\n                                price: Number(update.price.price),\n                                conf: Number(update.price.conf),\n                                expo: update.price.expo,\n                                publish_time: update.price.publish_time,\n                                ema_price: update.ema_price ? {\n                                    price: Number(update.ema_price.price),\n                                    conf: Number(update.ema_price.conf),\n                                    expo: update.ema_price.expo\n                                } : undefined,\n                                metadata: update.metadata\n                            }))\n                        }\n                    } as GetLatestPriceUpdatesContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to process price updates request\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error retrieving price updates: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        priceIds,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as GetLatestPriceUpdatesContent);\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Failed to process price updates request\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to get latest price updates\", { error });\n            throw new DataError(\n                DataErrorCode.NETWORK_ERROR,\n                \"Failed to get latest price updates\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getLatestPriceUpdatesAction;\n","import { elizaLogger } from \"@elizaos/core\";\nimport { DataError, PythErrorCode, ErrorSeverity } from \"../error\";\nimport Ajv, { type ErrorObject } from \"ajv\";\n\nconst ajv = new Ajv({\n    allErrors: true,\n    verbose: true,\n    coerceTypes: true,\n    useDefaults: true\n});\n\n// Publisher caps schema\nexport const publisherCapsSchema = {\n    type: 'object',\n    properties: {\n        text: { type: 'string' },\n        success: { type: 'boolean' },\n        data: {\n            type: 'object',\n            properties: {\n                caps: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        required: ['publisher', 'cap', 'timestamp'],\n                        properties: {\n                            publisher: {\n                                type: 'string',\n                                pattern: '^0x[a-fA-F0-9]{40}$'  // Ethereum address format\n                            },\n                            cap: {\n                                type: 'number',\n                                minimum: 0\n                            },\n                            timestamp: {\n                                type: 'number',\n                                minimum: 0\n                            }\n                        }\n                    }\n                },\n                error: { type: 'string' }\n            }\n        }\n    }\n};\n\n/**\n * Validates publisher caps data against the schema\n * @param data Data to validate\n * @returns Promise<boolean> True if validation succeeds\n * @throws DataError if validation fails\n */\nexport async function validatePublisherCapsData(data: unknown): Promise<boolean> {\n    try {\n        const validate = ajv.compile(publisherCapsSchema);\n        const valid = validate(data);\n\n        if (!valid) {\n            const errors = validate.errors || [];\n            elizaLogger.error(\"Publisher caps validation failed\", {\n                errors,\n                data\n            });\n\n            throw new DataError(\n                PythErrorCode.DATA_VALIDATION_FAILED,\n                \"Publisher caps validation failed\",\n                ErrorSeverity.HIGH,\n                {\n                    errors: errors.map((err: ErrorObject) => ({\n                        path: err.schemaPath,\n                        message: err.message,\n                        params: err.params\n                    })),\n                    data\n                }\n            );\n        }\n\n        return true;\n    } catch (error) {\n        if (error instanceof DataError) {\n            throw error;\n        }\n\n        elizaLogger.error(\"Publisher caps validation error\", {\n            error: error instanceof Error ? error.message : String(error),\n            data\n        });\n\n        throw new DataError(\n            PythErrorCode.DATA_SCHEMA_ERROR,\n            \"Publisher caps validation error\",\n            ErrorSeverity.HIGH,\n            {\n                error: error instanceof Error ? error.message : String(error),\n                data\n            }\n        );\n    }\n}\n\n/**\n * Validates a publisher address format\n * @param publisher Publisher address to validate\n * @returns boolean True if address is valid\n */\nexport function validatePublisherAddress(publisher: string): boolean {\n    return /^0x[a-fA-F0-9]{40}$/.test(publisher);\n}\n\n/**\n * Validates a cap value\n * @param cap Cap value to validate\n * @returns boolean True if cap is valid\n */\nexport function validateCap(cap: number): boolean {\n    return !isNaN(cap) && cap >= 0;\n}","import { type Action, elizaLogger } from \"@elizaos/core\";\nimport type { IAgentRuntime, Memory, State, HandlerCallback, Content, ActionExample } from \"@elizaos/core\";\n// import { HermesClient } from \"../hermes/HermesClient\";\nimport { HermesClient } from \"@pythnetwork/hermes-client\";\nimport { DataError, ErrorSeverity, DataErrorCode } from \"../error\";\nimport { validatePythConfig, getNetworkConfig, getConfig } from \"../environment\";\nimport { validatePublisherCapsData } from \"../utils/publisherCapsValidation\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.PYTH_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[PublisherCaps] ${message}`, data);\n        console.log(`[PublisherCaps] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface GetLatestPublisherCapsContent extends Content {\n    text: string;\n    success?: boolean;\n    data?: {\n        caps?: Array<{\n            publisher: string;\n            cap: number;\n            timestamp: number;\n        }>;\n        error?: string;\n    };\n}\n\nexport const getLatestPublisherCapsAction: Action = {\n    name: \"GET_LATEST_PUBLISHER_CAPS\",\n    similes: [\"FETCH_PUBLISHER_CAPS\", \"GET_PUBLISHER_LIMITS\", \"CHECK_PUBLISHER_CAPS\"],\n    description: \"Retrieve latest publisher caps from Pyth Network\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Get me all the latest publisher caps\"\n            } as GetLatestPublisherCapsContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Latest publisher caps\",\n                success: true,\n                data: {\n                    caps: [{\n                        publisher: \"0x1234567890abcdef1234567890abcdef12345678\",\n                        cap: 1000000,\n                        timestamp: 1641034800\n                    }]\n                }\n            } as GetLatestPublisherCapsContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        // Check if this message is intended for this action\n        if (message.content?.type !== \"GET_LATEST_PUBLISHER_CAPS\") {\n            return true; // Skip validation for other actions\n        }\n\n        logGranular(\"Validating GET_LATEST_PUBLISHER_CAPS action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as GetLatestPublisherCapsContent;\n\n            // Use the new validation function\n            try {\n                await validatePublisherCapsData(content);\n                logGranular(\"Publisher caps validation passed\");\n            } catch (error) {\n                logGranular(\"Publisher caps validation failed\", { error });\n                if (error instanceof DataError) {\n                    elizaLogger.error(\"Publisher caps validation failed\", {\n                        errors: error.details?.errors\n                    });\n                    throw error;\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Publisher caps validation failed\",\n                    ErrorSeverity.HIGH,\n                    { error }\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_LATEST_PUBLISHER_CAPS\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_LATEST_PUBLISHER_CAPS action\");\n\n        try {\n            // Get Pyth configuration\n            const config = await validatePythConfig(runtime);\n            if (!config) {\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Invalid Pyth configuration\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            // Get network configuration\n            const networkConfig = getNetworkConfig(config.PYTH_NETWORK_ENV);\n\n            // Initialize Hermes client\n            const hermesClient = new HermesClient(networkConfig.hermes);\n\n            logGranular(\"Initialized HermesClient\", {\n                endpoint: networkConfig.hermes\n            });\n\n            try {\n                // Get publisher caps with options\n                const response = await hermesClient.getLatestPublisherCaps({\n                    parsed: true\n                });\n\n                if (!response.parsed?.[0]?.publisher_stake_caps) {\n                    throw new DataError(\n                        DataErrorCode.VALIDATION_FAILED,\n                        \"No publisher caps data found in response\",\n                        ErrorSeverity.HIGH\n                    );\n                }\n\n                const publisherCaps = response.parsed[0].publisher_stake_caps;\n                const currentTimestamp = Date.now();\n\n                // Enhanced logging for each publisher cap\n                publisherCaps.forEach((cap, index) => {\n                    logGranular(`Publisher Cap ${index + 1}`, {\n                        publisher: cap.publisher,\n                        cap: cap.cap.toLocaleString(),\n                        timestamp: new Date(currentTimestamp).toLocaleString()\n                    });\n                });\n\n                logGranular(\"Successfully retrieved publisher caps\", {\n                    totalCaps: publisherCaps.length,\n                    allCaps: publisherCaps.map(cap => ({\n                        publisher: cap.publisher,\n                        cap: cap.cap.toLocaleString(),\n                        timestamp: new Date(currentTimestamp).toLocaleString()\n                    }))\n                });\n\n                // Format the publisher caps into text\n                const formattedText = publisherCaps\n                    .map((cap, index) =>\n                        `Publisher ${index + 1}:\nID: ${cap.publisher}\nCap: ${cap.cap.toLocaleString()} tokens\nTimestamp: ${new Date(currentTimestamp).toLocaleString()}`\n                    )\n                    .join('\\n\\n');\n\n                // Create callback content with formatted text\n                if (callback) {\n                    await callback({\n                        text: `Retrieved ${publisherCaps.length} publisher caps:\\n\\n${formattedText}`,\n                        success: true,\n                        data: {\n                            caps: publisherCaps.map(cap => ({\n                                publisher: cap.publisher,\n                                cap: cap.cap,\n                                timestamp: currentTimestamp\n                            }))\n                        }\n                    } as GetLatestPublisherCapsContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to process publisher caps request\", { error });\n                if (error instanceof DataError) {\n                    throw error;\n                }\n                throw new DataError(\n                    DataErrorCode.VALIDATION_FAILED,\n                    \"Failed to process publisher caps request\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to get publisher caps\", { error });\n            if (error instanceof DataError) {\n                throw error;\n            }\n            throw new DataError(\n                DataErrorCode.NETWORK_ERROR,\n                \"Failed to get publisher caps\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getLatestPublisherCapsAction;\n","import type { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport getPriceFeedsAction from \"./actions/actionGetPriceFeeds\";\nimport getPriceUpdatesStreamAction from \"./actions/actionGetPriceUpdatesStream\";\nimport getLatestPriceUpdatesAction from \"./actions/actionGetLatestPriceUpdates\";\nimport getLatestPublisherCapsAction from \"./actions/actionGetLatestPublisherCaps\";\n\n// Start the loader\nconst spinner = ora({\n  text: chalk.cyan('Initializing Pyth Data Plugin...'),\n  spinner: 'dots12',\n  color: 'cyan'\n}).start();\n\n// Simulate some loading time\nawait new Promise(resolve => setTimeout(resolve, 1000));\n\nconst actions = [\n  getPriceFeedsAction,\n  getPriceUpdatesStreamAction,\n  getLatestPriceUpdatesAction,\n  getLatestPublisherCapsAction,\n];\n\n// Initial banner with chalk styling\nconsole.log('\\n' + chalk.cyan('┌────────────────────────────────────────┐'));\nconsole.log(chalk.cyan('│') + chalk.yellow.bold('          PYTH DATA PLUGIN             ') + chalk.cyan(' │'));\nconsole.log(chalk.cyan('├────────────────────────────────────────┤'));\nconsole.log(chalk.cyan('│') + chalk.white('  Initializing Pyth Data Services...    ') + chalk.cyan('│'));\nconsole.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\nconsole.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n// Stop the loader\nspinner.succeed(chalk.green('Pyth Data Plugin initialized successfully!'));\n\n// Create a beautiful table for actions\nconst actionTable = new Table({\n  head: [\n    chalk.cyan('Action'),\n    chalk.cyan('H'),\n    chalk.cyan('V'),\n    chalk.cyan('E'),\n    chalk.cyan('Similes')\n  ],\n  style: {\n    head: [],\n    border: ['cyan']\n  }\n});\n\n// Format and add action information\nactions.forEach(action => {\n  actionTable.push([\n    chalk.white(action.name),\n    typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n    typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n    action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n    chalk.gray(action.similes?.join(', ') || 'none')\n  ]);\n});\n\n// Display the action table\nconsole.log('\\n' + actionTable.toString());\n\n// Plugin status with a nice table\nconst statusTable = new Table({\n  style: {\n    border: ['cyan']\n  }\n});\n\nstatusTable.push(\n  [chalk.cyan('Plugin Status')],\n  [chalk.white('Name    : ') + chalk.yellow('pyth-data')],\n  [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n  [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n);\n\nconsole.log('\\n' + statusTable.toString() + '\\n');\n\nconst pythDataPlugin: Plugin = {\n  name: \"pyth-data\",\n  description: \"Pyth Data Plugin for price feeds and market data\",\n  actions: actions,\n  evaluators: []\n};\n\n// Export for both CommonJS and ESM\nexport { pythDataPlugin };\nexport default pythDataPlugin;\n"]}